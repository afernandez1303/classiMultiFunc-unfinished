devtools::load_all(".")
417.57+15*2
vartest.check.equal = function(x, y){
n = length(x)
m = length(y)
sx = var(x)
sy = var(y)
f =  sx/sy
return (pt(f,n+m-2))
# Amanda: Això no és correcte. La distribució d'això és una F de Fisher i no una T de Student...
}
vartest.equal = function (x, y){
n = length(x)
m = length(y)
sx = var(x)
sy = var(y)
xbar = mean(x)
ybar = mean(y)
sp2 = ((n-1)*sx+(m-1)*sy)/(n+m-2)
tobs = (xbar-ybar)/(sqrt(sp2)*sqrt(1/n+1/m))
return (pt(tobs,n+m-2))
}
vartest.diffr = function (x, y){
n = length(x)
m = length(y)
sx = var(x)
sy = var(y)
xbar = mean(x)
ybar = mean(y)
tobs = (xbar-ybar)/(sqrt(sx/n+sy/m))
k = ((sx/n+sy/m)^2)/(((sx/n)^2)/(n-1)+((sy/m)^2)/(m-1))
return (pt(tobs,k))
}
mu.test = function(x, y, sigma){
n = length(x)
m = length(y)
xbar = mean(x)
ybar = mean(y)
tobs = (xbar-ybar)/(sqrt(sigma[1]/n+sigma[2]/m))
return (pnorm(tobs,0,1))
}
paired.test = function(x,y){
n = length(x)
D  = sum(x-y)/n
Sd = sum(((x-y)-D)^2)/(n-1)
tobs = D/(Sd/sqrt(n))
return(pt(tobs,n-1))
}
custom.ttest = function( x , y , test.type = "two-sided", true.sigma = FALSE,
sigma = NULL, alpha = 0.05, paired = FALSE){
t.stat = FALSE
if ( paired == TRUE ) {  # valors aparellats
p.value<-paired.test(x,y)
}else{                  # valors NO aparellats
if(true.sigma == TRUE){ # sigma són conegudes
p.value<-mu.test(x,y,sigma)
}else{                  # sigma són desconegudes
if(vartest.check.equal(x,y)>0.05){ # sigma són iguals
p.value<-vartest.equal(x,y)
}else{                        # sigma són diferents
p.value<-vartest.diffr(x,y)
}
}
}
if(test.type == "two-sided"){
if(p.value>alpha/2 && p.value<(1-alpha/2)){
t.stat = TRUE
p.value = p.value * 2
# Amanda: el p-valor bilateral no és correcte. Tal i com ho has calculat abans, si tobs són positives, això en alguns casos et donarà
# més gran que 1.
}
}else if(test.type == "less"){
if(p.value<(1-alpha)){
t.stat = TRUE
}
}else if(test.type == "greater"){
if(p.value>(alpha)){
t.stat = TRUE
p.value = 1-p.value
}
}else{
return(cat("Invalid Test Type"))
}
return ( cat ( " ------------------ \n" ,
"test statistic = " , t.stat , "\n" ,
"p-value = " , p.value , "\n" ,
"-------------------") )
}
# Testeig de la funció creada
# Prova pacients medicació
pac.abans = c(115, 112, 107, 119, 115, 138, 126, 105, 104, 115)
pac.despr = c(128, 115, 106, 128, 122, 145, 132, 109, 102, 117)
t.test(pac.abans, pac.despr, alternative =  "less", var.equal = TRUE, conf.level = 0.9)
#3.e)
#Treiem b0 i b1 del summary
b0 = 1.281511  #y-intercept de la recta de regressió
b1 = -0.008758 #pendent de la recta de regressió
vhat = b0 + b1*temp #la recta queda definida així
er = visc - vhat
n = length(er)
stde = sum(er^2) / (n - 2)
#3.a)
#Dades de temperatura i viscositat. Volem saber si existeix correlació
temp = c(24.9, 35.0, 44.9, 55.1, 65.2, 75.2, 85.2, 95.2)
visc = c(1.1330, 0.9772, 0.8532, 0.7550, 0.6723, 0.6021, 0.5420, 0.5074)
#Observem clara correlació negativa
plot(temp, visc, type = "l", col = "red")
#3.b)
summary (lm(visc ~ temp))
#3.c)
#fem servir el t.test per a comprovar la hipòtesi plantejada
t.test(temp, visc, conf.level = 0.95)$conf.int
#3.d)
#test de correlació de pearson, ja a R-Studio
cor(temp, visc)
cor.test(temp, visc)
cor(temp,visc)^2
#3.e)
#Treiem b0 i b1 del summary
b0 = 1.281511  #y-intercept de la recta de regressió
b1 = -0.008758 #pendent de la recta de regressió
vhat = b0 + b1*temp #la recta queda definida així
er = visc - vhat
n = length(er)
stde = sum(er^2) / (n - 2)
stde
1.5+2.5+1
